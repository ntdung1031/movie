import React, { useState, useEffect } from "react";
import { FaUserCircle } from "react-icons/fa";
import { IoMdArrowDropdown } from "react-icons/io";
import { MdOutlineLanguage } from "react-icons/md";
import '~/components/Header/Header.scss';
import logo from "~/assets/img/logo.jpg"; // Thay b·∫±ng logo th·ª±c t·∫ø
import { movieData } from "~/data/Movie"; // Import d·ªØ li·ªáu m·∫´u
import Login from "~/components/Login/Login"; // Import component Login

const Header = () => {
  const [selectedTheater, setSelectedTheater] = useState("");
  const [movieList, setMovieList] = useState([]);
  const [selectedMovie, setSelectedMovie] = useState("");
  const [dateList, setDateList] = useState([]);
  const [selectedDate, setSelectedDate] = useState("");
  const [timeList, setTimeList] = useState([]);
  const [isLoginOpen, setIsLoginOpen] = useState(false);
  const [currentUser, setCurrentUser] = useState(null);
  const [showUserMenu, setShowUserMenu] = useState(false);

  // Ki·ªÉm tra ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p khi t·∫£i trang
  useEffect(() => {
    const user = localStorage.getItem("currentUser");
    if (user) {
      setCurrentUser(JSON.parse(user));
    }
  }, []);

  // Khi ch·ªçn r·∫°p -> c·∫≠p nh·∫≠t danh s√°ch phim
  const handleTheaterChange = (e) => {
    const theaterName = e.target.value;
    setSelectedTheater(theaterName);

    // L·ªçc danh s√°ch phim theo r·∫°p
    const selectedMovies = movieData.find((t) => t.theater === theaterName);
    setMovieList(selectedMovies ? selectedMovies.movies : []);

    // Reset c√°c l·ª±a ch·ªçn sau
    setSelectedMovie("");
    setDateList([]);
    setSelectedDate("");
    setTimeList([]);
  };

  // Khi ch·ªçn phim -> c·∫≠p nh·∫≠t danh s√°ch ng√†y
  const handleMovieChange = (e) => {
    const movieName = e.target.value;
    setSelectedMovie(movieName);

    // L·ªçc danh s√°ch ng√†y theo phim
    const selectedMovieData = movieList.find((m) => m.name === movieName);
    setDateList(selectedMovieData ? selectedMovieData.showtimes : []);

    // Reset c√°c l·ª±a ch·ªçn sau
    setSelectedDate("");
    setTimeList([]);
  };

  // Khi ch·ªçn ng√†y -> c·∫≠p nh·∫≠t danh s√°ch su·∫•t chi·∫øu
  const handleDateChange = (e) => {
    const date = e.target.value;
    setSelectedDate(date);

    // L·ªçc danh s√°ch su·∫•t chi·∫øu theo ng√†y
    const selectedShowtime = dateList.find((d) => d.date === date);
    setTimeList(selectedShowtime ? selectedShowtime.times : []);
  };

  // H√†m m·ªü modal ƒëƒÉng nh·∫≠p
  const openLoginModal = () => {
    setIsLoginOpen(true);
  };

  // H√†m ƒë√≥ng modal ƒëƒÉng nh·∫≠p
  const closeLoginModal = () => {
    setIsLoginOpen(false);
  };

  // X·ª≠ l√Ω khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng
  const handleLoginSuccess = (user) => {
    setCurrentUser(user);
  };

  // X·ª≠ l√Ω ƒëƒÉng xu·∫•t
  const handleLogout = () => {
    localStorage.removeItem("currentUser");
    setCurrentUser(null);
    setShowUserMenu(false);
  };

  // Hi·ªÉn th·ªã/·∫©n menu ng∆∞·ªùi d√πng
  const toggleUserMenu = () => {
    setShowUserMenu(!showUserMenu);
  };

  return (
    <>
      <header className="text-white w-full mt-6 mb-6">
        {/* Thanh tr√™n */}
        <div className="flex justify-between items-center py-3">
          {/* Logo */}
          <img src={logo} alt="Cinestar" className="h-12" />

          {/* N√∫t ƒë·∫∑t v√© & ƒë·∫∑t b·∫Øp n∆∞·ªõc */}
          <div className="flex gap-4">
            <button className="bg-purple-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 font-semibold">
              üì± ƒê·∫∂T V√â NGAY
            </button>
            <button className="bg-purple-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 font-semibold">
              üçø ƒê·∫∂T B·∫ÆP N∆Ø·ªöC
            </button>
          </div>

          {/* ƒêƒÉng nh·∫≠p & Ng√¥n ng·ªØ */}
          <div className="flex items-center gap-4">
            {currentUser ? (
              // Hi·ªÉn th·ªã th√¥ng tin ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p
              <div className="relative">
                <button 
                  className="flex items-center gap-2 font-medium" 
                  onClick={toggleUserMenu}
                >
                  <FaUserCircle size={24} />
                  <span>{currentUser.fullName || currentUser.username}</span>
                  <IoMdArrowDropdown size={20} />
                </button>
                
                {/* Menu dropdown khi ƒë√£ ƒëƒÉng nh·∫≠p */}
                {showUserMenu && (
                  <div className="absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 z-10">
                    <div className="py-1">
                      <button
                        className="block w-full text-left px-4 py-2 text-xl text-gray-700 hover:bg-gray-100"
                      >
                        Th√¥ng tin t√†i kho·∫£n
                      </button>
                      <button
                        className="block w-full text-left px-4 py-2 text-xl text-gray-700 hover:bg-gray-100"
                      >
                        L·ªãch s·ª≠ ƒë·∫∑t v√©
                      </button>
                      <button
                        onClick={handleLogout}
                        className="block w-full text-left px-4 py-2 text-xl text-red-600 hover:bg-gray-100"
                      >
                        ƒêƒÉng xu·∫•t
                      </button>
                    </div>
                  </div>
                )}
              </div>
            ) : (
              // Hi·ªÉn th·ªã n√∫t ƒëƒÉng nh·∫≠p n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p
              <>
                <FaUserCircle size={24} />
                <button className="font-medium" onClick={openLoginModal}>ƒêƒÉng nh·∫≠p</button>
              </>
            )}
            <MdOutlineLanguage size={24} />
            <span className="font-medium">VN</span>
          </div>
        </div>

        {/* Thanh d∆∞·ªõi */}
        <div className="color-down text-black px-10 py-4 rounded-lg mt-12 mb-6 shadow-md">
          <div className="flex justify-between items-center">
            <span className="text-2xl font-bold">ƒê·∫∂T V√â NHANH</span>
            <div className="flex gap-4">
              {/* Ch·ªçn R·∫°p */}
              <select
                className="color-choise-mv border px-6 py-3 rounded-lg text-2xl font-medium"
                onChange={handleTheaterChange}
                value={selectedTheater}
              >
                <option value="">1. Ch·ªçn R·∫°p</option>
                {movieData.map((theater) => (
                  <option key={theater.id} value={theater.theater}>
                    {theater.theater}
                  </option>
                ))}
              </select>

              {/* Ch·ªçn Phim */}
              <select
                className="color-choise-mv border px-6 py-3 rounded-lg text-2xl font-medium"
                onChange={handleMovieChange}
                value={selectedMovie}
                disabled={!selectedTheater}
              >
                <option value="">2. Ch·ªçn Phim</option>
                {movieList.map((movie) => (
                  <option key={movie.id} value={movie.name}>
                    {movie.name}
                  </option>
                ))}
              </select>

              {/* Ch·ªçn Ng√†y */}
              <select
                className="color-choise-mv border px-6 py-3 rounded-lg text-2xl font-medium"
                onChange={handleDateChange}
                value={selectedDate}
                disabled={!selectedMovie}
              >
                <option value="">3. Ch·ªçn Ng√†y</option>
                {dateList.map((date) => (
                  <option key={date.date} value={date.date}>
                    {date.date}
                  </option>
                ))}
              </select>

              {/* Ch·ªçn Su·∫•t */}
              <select className="color-choise-mv border px-6 py-3 rounded-lg text-2xl font-medium" disabled={!selectedDate}>
                <option value="">4. Ch·ªçn Su·∫•t</option>
                {timeList.map((time, index) => (
                  <option key={index} value={time}>
                    {time}
                  </option>
                ))}
              </select>

              {/* N√∫t ƒê·∫∂T NGAY */}
              <button className="bg-purple-700 text-white px-6 py-3 text-lg font-bold rounded-md shadow-md 
                                hover:bg-purple-800 transition duration-300">
                ƒê·∫∂T NGAY
              </button>
            </div>
          </div>
        </div>
      </header>

      {/* Login Modal */}
      <Login 
        isOpen={isLoginOpen} 
        onClose={closeLoginModal} 
        onLoginSuccess={handleLoginSuccess}
      />
    </>
  );
};

export default Header;